; ;------------------------------------
; ; Test 000
; ;
; ;------------------------------------

; ;------------------------------------
; ; directive compilation fichier
; ;------------------------------------

                    VHDL      "../../../softwares/pBlazIDE374/ROM/ROM_blank_adh.vhd", "color.vhd", "OpenBlaze8_ROM"

; ;------------------------------------
; ; Constantes
; ;------------------------------------
sp                  EQU       sF
color               EQU       sE
; ;------------------------------------
; ; directives pour le simulateur:  definition des  E/S
; ;------------------------------------
switch_id           EQU       $00
led_id              EQU       $04
vga_id              EQU       $08

switch              DSIN      switch_id
led                 DSOUT     led_id
vga_config          DSOUT     vga_id + 0
vga_color           DSOUT     vga_id + 1
vga_txt             DSOUT     vga_id + 2

; ;------------------------------------
; ; MAIN
; ;------------------------------------
                    ORG       $00
main: 
; LOAD      s0, 1
; OUT       s0, vga_id + 0
; LOAD      color, 0
                    LOAD      color, 0

                    LOAD      s0, $57 + $0D
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0E
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0A
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0D
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0B
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0E
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0E
                    OUT       s0, vga_id + 2
                    LOAD      s0, $57 + $0F
                    OUT       s0, vga_id + 2

main_loop: 
                    IN        s0, SWITCH_ID
                    AND       s0, $01
                    OUT       s0, led_id
                    OUT       s0, vga_id + 0

                    OUT       color, vga_id + 1
                    ADD       color, 1
                    CALL      wait_100ms
                    JUMP      main_loop

; ;------------------------------------
; ; wait_1s
; ; arguments : none
; ; results   : none
; ; Attendre 1s
; ;------------------------------------
wait_1s: 
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    RET       
; ;------------------------------------
; ; wait_100ms
; ; arguments : none
; ; results   : none
; ; Attendre 100 ms
; ;------------------------------------
wait_100ms: 
; ;                 W = 6 + W0 + 7
; ;                 W = 6 + 2 + N0*(2+W1) + 1 + 7
; ;                 W = 16 + N0*(2+W1)
; ;                 W = 16 + N0*(2 + 2 + N1*(2+W2) + 1)
; ;                 W = 16 + N0*(5 + N1*(2+W2))
; ;                 W = 16 + N0*(5 + N1*(2+ 2 + N2*2 + 1))
; ;                 W = 16 + N0*(5 + N1*(5 + N2*2))
; ;                 W = 16 + 5*N0 + 5*N0*N1 + 2*N0*N1*N2

; ;					50 Mhz = 50 000 000 cycle/s
; ;					   	   =  5 000 000 cycle/100ms
; ; 					   =  2 500 000 inst/100ms
; ;					N0 = 42
; ; 				N1 = 119
; ; 				N2 = 247

; ;                 save
                    STORE     s0, sF
                    ADD       sF, 1
                    STORE     s1, sF
                    ADD       sF, 1
                    STORE     s2, sF
                    ADD       sF, 1

; ;                 while1 : W0= 2 + N0*(2+W1) + 1
                    LOAD      s0, 42
                    JUMP      wait_100ms_while0
wait_100ms_while0_body: 
; ;                 while1 : W1= 2 + N1*(2+W2) + 1
                    LOAD      s1, 119
                    JUMP      wait_100ms_while1
wait_100ms_while1_body: 

; ;                 while2 : W2= 2 + N2*2 + 1
                    LOAD      s2, 247
                    JUMP      wait_100ms_while2
wait_100ms_while2_body: 
                    SUB       s2, 1
wait_100ms_while2: 
                    JUMP      NZ, wait_100ms_while2_body

                    SUB       s1, 1
wait_100ms_while1: 
                    JUMP      NZ, wait_100ms_while1_body

                    SUB       s0, 1
wait_100ms_while0: 
                    JUMP      NZ, wait_100ms_while0_body

; ;                 restore
                    SUB       sF, 1
                    FETCH     s2, sF
                    SUB       sF, 1
                    FETCH     s1, sF
                    SUB       sF, 1
                    FETCH     s0, sF
                    RET       
; ;------------------------------------
; ; Interrupt VECTOR
; ;------------------------------------
                    ORG       $3FF
                    RETI      ENABLE
