; ;------------------------------------
; ; Test 000
; ;
; ;------------------------------------

; ;------------------------------------
; ; directive compilation fichier
; ;------------------------------------

                    VHDL      "../../../infra/soft/pBlazIDE374/ROM/ROM_blank_adh.vhd", "../src/OpenBlaze8_ROM.vhd", "OpenBlaze8_ROM"

; ;------------------------------------
; ; Constantes
; ;------------------------------------
sp                  EQU       sF
color               EQU       sE
; ;------------------------------------
; ; directives pour le simulateur:  definition des  E/S
; ;------------------------------------
switch_id           EQU       $00
led_id              EQU       $04
vga_id              EQU       $80
timer_id            EQU       $10

switch              DSIN      switch_id
led                 DSOUT     led_id
vga_config          DSOUT     vga_id + 0
vga_fb_num          DSOUT     vga_id + 1
vga_fb_color        DSOUT     vga_id + 2
vga_fb_addr_x       DSOUT     vga_id + 3
vga_fb_addr_y       DSOUT     vga_id + 5
vga_fb_data         DSOUT     vga_id + 7
timer_ctrl_w        DSOUT     timer_id + 0
timer_ctrl_r        DSIN      timer_id + 0
timer_cnt0          DSOUT     timer_id + 4
timer_cnt1          DSOUT     timer_id + 5
timer_cnt2          DSOUT     timer_id + 6
timer_cnt3          DSOUT     timer_id + 7
; ;------------------------------------
; ; MAIN
; ;------------------------------------
                    ORG       $00
main: 
;                   mode unicolor
                    LOAD      s0, $01
                    OUT       s0, vga_config
                    
					LOAD      s0, $01
                    OUT       s0, vga_fb_num
                    LOAD      color, $ff
                    OUT       color, vga_fb_color

					
					load      s0, $00
					load      s1, $00
					load      s2, $01
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data
					
					load      s0, $00
					load      s1, $01
					load      s2, $02
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data
					
					load      s0, $00
					load      s1, $02
					load      s2, $04
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data					
										
					load      s0, $00
					load      s1, $03
					load      s2, $08
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data					
					
					load      s0, $01
					load      s1, $04
					load      s2, $01
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data
					
					load      s0, $01
					load      s1, $05
					load      s2, $02
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data
					
					load      s0, $01
					load      s1, $06
					load      s2, $04
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data					
										
					load      s0, $01
					load      s1, $07
					load      s2, $08
					out       s0,vga_fb_addr_x
					out       s1,vga_fb_addr_y
					out       s2,vga_fb_data					
					
										
					LOAD      s0, $02
                    OUT       s0, vga_fb_num
                    LOAD      color, $e0
                    OUT       color, vga_fb_color

					load      s0, $00
					load      s2, $01
					out       s0,vga_fb_addr_x
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data
					add		  s0,1
					out       s0,vga_fb_addr_y
					out       s2,vga_fb_data

					LOAD      s0, $00
                    OUT       s0, vga_fb_num
                    LOAD      color, $00
                    OUT       color, vga_fb_color

; LOAD      s0, 1
; OUT       s0, vga_id + 0
; LOAD      color, 0
; LOAD      color, $41
; 
; LOAD      s0, $57 + $0D
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0E
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0A
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0D
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0B
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0E
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0E
; OUT       s0, vga_id + 2
; LOAD      s0, $57 + $0F
; OUT       s0, vga_id + 2

main_loop: 
                    IN        s0, SWITCH_ID
                    AND       s0, $03
                    OUT       s0, led_id
                    OUT       s0, vga_config
                    OUT       color, vga_fb_color
                    ADD       color, 1
                    CALL      wait_1s
                    JUMP      main_loop

; ;------------------------------------
; ; wait_1s
; ; arguments : none
; ; results   : none
; ; Attendre 1s
; ;------------------------------------
wait_1s: 
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    CALL      wait_100ms
                    RET       
; ;------------------------------------
; ; wait_100ms
; ; arguments : none
; ; results   : none
; ; Attendre 100 ms
; ;------------------------------------
wait_100ms: 
                    CALL      wait_100ms_hard
                    RET       

wait_100ms_hard: 
; ;                 save
                    STORE     s0, sp
                    ADD       sp, 1

; ; 	            Timer Disable
                    LOAD      s0, $00
                    OUT       s0, timer_id + 1

; ;                 Timer hardware version
; ;                 Set 100 in counter
                    LOAD      s0, $64
                    OUT       s0, timer_id + 4
                    LOAD      s0, $00
                    OUT       s0, timer_id + 5
                    OUT       s0, timer_id + 6
                    OUT       s0, timer_id + 7

; ; 	            Timer Enable + Use Tick
                    LOAD      s0, $09
                    OUT       s0, timer_id + 1

wait_100ms_hard_loop: 
                    IN        s0, timer_id + 0
                    TEST      s0, $01
                    JUMP      Z, wait_100ms_hard_loop

; ;                 restore
                    SUB       sp, 1
                    FETCH     s0, sp
                    RET       

; ;------------------------------------
; ; Interrupt VECTOR
; ;------------------------------------
                    ORG       $3FF
                    RETI      ENABLE
