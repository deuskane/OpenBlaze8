-------------------------------------------------------------------------------
-- Title      : display VGA
-- Project    : PicoSOC
-------------------------------------------------------------------------------
-- File       : display_VGA.vhd
-- Author     : Mathieu Rosiere
-- Company    : 
-- Created    : 2013-12-26
-- Last update: 2017-05-13
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description:
-- Register Map :
-- [0] R/W : config
--           [1:0] Mode
--                 00 Text mode
--                 01 Unicolor mode
-- [1] R/W : color
--           In Text mode :
--           [7]   Reserved
--           [6]   Background red
--           [5]   Background green
--           [4]   Background blue
--           [3]   Foreground light
--           [2]   Foreground red
--           [1]   Foreground green
--           [0]   Foreground blue
--           In Unicolor
--           [7:5] Red
--           [4:2] Green
--           [1:0] Blue
-- [2]   W : text buffer
--           [7:0] ASCII Code
-------------------------------------------------------------------------------
-- Copyright (c) 2013 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2017-04-28  0.4      rosiere clean up code
-- 2017-03-31  0.3      rosiere change bus interface 
-- 2014-02-07  0.2      rosiere bus_read_data : protection during a reset
-- 2013-12-26  0.1      rosiere	Created
-------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.ALL;

entity vga_controller is
  generic(FSYS           : positive := 50_000_000;
          NB_FRAME       : natural  := 0;
          TEXT_MODE      : boolean  := true;
          SIZE_ADDR      : positive := 2;
          SIZE_DATA      : positive := 8
          );
    Port (clk_i          : in  STD_LOGIC;
          arstn_i        : in  STD_LOGIC;

          -- Bus
          cs_i           : in  std_logic;
          re_i           : in  std_logic;
          we_i           : in  std_logic;
          addr_i         : in  std_logic_vector (SIZE_ADDR-1 downto 0);
          wdata_i        : in  std_logic_vector (SIZE_DATA-1 downto 0);
          rdata_o        : out std_logic_vector (SIZE_DATA-1 downto 0);
          busy_o         : out std_logic;

          -- VGA
          vga_HSYNC_o    : out std_logic;
          vga_VSYNC_o    : out std_logic;
          vga_Red_o      : out std_logic_vector (2 downto 0);
          vga_Green_o    : out std_logic_vector (2 downto 0);
          vga_Blue_o     : out std_logic_vector (2 downto 1)
          );
end vga_controller;

architecture rtl of vga_controller is

  -----------------------------------------------------------------------------
  -- Address
  -----------------------------------------------------------------------------
  constant RADDR_CFG                 : std_logic_vector (SIZE_ADDR-1 downto 0) := std_logic_vector(to_unsigned(0,SIZE_ADDR));
  constant RADDR_COLOR               : std_logic_vector (SIZE_ADDR-1 downto 0) := std_logic_vector(to_unsigned(1,SIZE_ADDR));
                                     
  constant WADDR_CFG                 : std_logic_vector (SIZE_ADDR-1 downto 0) := std_logic_vector(to_unsigned(0,SIZE_ADDR));
  constant WADDR_COLOR               : std_logic_vector (SIZE_ADDR-1 downto 0) := std_logic_vector(to_unsigned(1,SIZE_ADDR));
  constant WADDR_TEXT_BUFFER         : std_logic_vector (SIZE_ADDR-1 downto 0) := std_logic_vector(to_unsigned(2,SIZE_ADDR));
                                   
  -----------------------------------------------------------------------------
  -- Local parameters
  -----------------------------------------------------------------------------
  constant DISPLAY_X_MAX             : natural := 640;
  constant DISPLAY_Y_MAX             : natural := 480;
  constant CHAR_X_MAX                : natural := 8 ;    -- 640x480 : 
  constant CHAR_Y_MAX                : natural := 16;    -- 640x480 : 
  constant TEXT_BUFFER_X_MAX         : natural := DISPLAY_X_MAX/CHAR_X_MAX;
  constant TEXT_BUFFER_Y_MAX         : natural := DISPLAY_Y_MAX/CHAR_Y_MAX;
  constant TEXT_BUFFER_DEPTH_MAX     : natural := TEXT_BUFFER_X_MAX * TEXT_BUFFER_Y_MAX;  -- 640x480 : 80x30 character
  constant TEXT_BUFFER_ADDR_SIZE_MAX : natural := 13;
  constant TEXT_BUFFER_ADDR_X_SIZE   : natural := 7;
  constant TEXT_BUFFER_ADDR_Y_SIZE   : natural := 5;

  constant TEXT_BUFFER_X_CUR         : natural := 8;
  constant TEXT_BUFFER_Y_CUR         : natural := 8;
  constant TEXT_BUFFER_DEPTH_CUR     : natural := 64;
  constant TEXT_BUFFER_ADDR_SIZE_CUR : natural := 6;
  
  constant MODE_TEXT                 : std_logic_vector(1 downto 0) := "00";
  constant MODE_UNICOLOR             : std_logic_vector(1 downto 0) := "01";
  constant MODE_FRAME                : std_logic_vector(1 downto 0) := "11";

  -----------------------------------------------------------------------------
  -- Register
  -----------------------------------------------------------------------------
  signal   config_r                  : std_logic_vector(1 downto 0);
  signal   color_r                   : std_logic_vector(7 downto 0);
  --                                   In Text mode :
  --                                   [7]   Reserved
  --                                   [6]   Background red
  --                                   [5]   Background green
  --                                   [4]   Background blue
  --                                   [3]   Foreground light
  --                                   [2]   Foreground red
  --                                   [1]   Foreground green
  --                                   [0]   Foreground blue
  --                                   In Unicolor
  --                                   [7:5] Red
  --                                   [4:2] Green
  --                                   [1:0] Blue
  

  signal   text_buffer_write_addr_x_r: std_logic_vector(TEXT_BUFFER_ADDR_X_SIZE-1 downto 0);
  signal   text_buffer_write_addr_y_r: std_logic_vector(TEXT_BUFFER_ADDR_Y_SIZE-1 downto 0);
  -----------------------------------------------------------------------------
  -- Signal
  -----------------------------------------------------------------------------
  signal   arst                      : std_logic;
                                     
  signal   text_buffer_read_en       : std_logic;
  signal   text_buffer_read_addr     : std_logic_vector(TEXT_BUFFER_ADDR_SIZE_CUR-1 downto 0);
  signal   text_buffer_read_addr_x   : std_logic_vector(TEXT_BUFFER_ADDR_X_SIZE-1 downto 0);
  signal   text_buffer_read_addr_y   : std_logic_vector(TEXT_BUFFER_ADDR_Y_SIZE-1 downto 0);
  signal   text_buffer_read_code     : std_logic_vector(7 downto 0);
  signal   text_buffer_write_en      : std_logic;
  signal   text_buffer_write_addr    : std_logic_vector(TEXT_BUFFER_ADDR_SIZE_CUR-1 downto 0);
  signal   text_buffer_write_code    : std_logic_vector(7 downto 0);
  signal   font_memory_read_addr     : std_logic_vector(7 downto 0);
  signal   character_read_addr_x     : std_logic_vector(2 downto 0);
  signal   character_read_addr_y     : std_logic_vector(3 downto 0);
  signal   pixel                     : std_logic;
                                     
  -- config                          
  alias    cfg_mode                  : std_logic_vector(1 downto 0) is config_r(1 downto 0);
                                     
  signal   vga_RGB                   : std_logic_vector(7 downto 0);
  signal   vga_RGB_unicolor          : std_logic_vector(7 downto 0);
  signal   vga_RGB_text              : std_logic_vector(7 downto 0);
  signal   vga_RGB_text_background   : std_logic_vector(7 downto 0);
  signal   vga_RGB_text_foreground   : std_logic_vector(7 downto 0);
  signal   vga_RGB_frame             : std_logic_vector(7 downto 0);
                                     
  signal   clk_25Mhz                 : std_logic;
  signal   vga_Blank                 : std_logic;
  signal   vga_HSYNC                 : std_logic;
  signal   vga_VSYNC                 : std_logic;
  signal   vga_HCOUNT                : std_logic_vector (10 downto 0);
  signal   vga_HCOUNT_ext            : std_logic_vector (TEXT_BUFFER_ADDR_SIZE_MAX-1  downto 0);
  signal   vga_HCOUNT_ext1           : std_logic_vector (TEXT_BUFFER_ADDR_SIZE_MAX-1  downto 0);
  signal   vga_HCOUNT_ext2           : std_logic_vector (TEXT_BUFFER_ADDR_SIZE_MAX-1  downto 0);
  signal   vga_HCOUNT_en             : std_logic;
  signal   vga_VCOUNT                : std_logic_vector (10 downto 0); 
  signal   vga_VCOUNT_ext            : std_logic_vector (TEXT_BUFFER_ADDR_SIZE_MAX-1  downto 0);
  signal   vga_VCOUNT_ext1           : std_logic_vector (TEXT_BUFFER_ADDR_SIZE_MAX-1  downto 0);
  signal   vga_VCOUNT_ext2           : std_logic_vector (TEXT_BUFFER_ADDR_SIZE_MAX-1  downto 0);
  signal   vga_VCOUNT_en             : std_logic;
begin

  -----------------------------------------------------------------------------
  -- Reset
  -----------------------------------------------------------------------------
  arst   <= not arstn_i;
  
  -----------------------------------------------------------------------------
  -- Clock
  -----------------------------------------------------------------------------
  ins_clk_25Mhz: entity work.clock_divider(rtl)
  generic map (RATIO => FSYS/25_000_000)
  port    map (
     clk_i          => clk_i
    ,arstn_i        => arstn_i
    ,cke_i          => '1'
    ,clk_div_o      => clk_25Mhz
    );

  -----------------------------------------------------------------------------
  -- Frame Buffer
  -----------------------------------------------------------------------------
--gen_frame_buffer: for i in 1 to NB_FRAME
--generate
--  ins_frame_buffer : entity work.vga_buffer(rtl)
--    generic map
--    (WIDTH    => 1,
--     DEPTH    => DISPLAY_X_MAX*DISPLAY_Y_MAX
--     )
--    port map
--    (clk_i    => clk_i
--    ,arstn_i  => arstn_i
--
--    ,re_i     => text_buffer_read_en
--    ,raddr_i  => text_buffer_read_addr
--    ,rdata_o  => text_buffer_read_code
--    ,rovf_o   => open
--    
--    ,we_i     => text_buffer_write_en    
--    ,waddr_i  => text_buffer_write_addr
--    ,wdata_i  => text_buffer_write_code
--    ,wovf_o   => open
--     );
--end generate gen_frame_buffer;

  vga_RGB_frame <= vga_RGB_unicolor;
  
  -----------------------------------------------------------------------------
  -- Text Buffer
  -----------------------------------------------------------------------------
  ins_text_buffer : entity work.vga_buffer(rtl)
  generic map (
    WIDTH    => 8,
    DEPTH    => TEXT_BUFFER_DEPTH_CUR
    )

  port map (
    clk_i    => clk_i
   ,arstn_i  => arstn_i

   ,re_i     => text_buffer_read_en
   ,raddr_i  => text_buffer_read_addr
   ,rdata_o  => text_buffer_read_code
   ,rovf_o   => open

   ,we_i     => text_buffer_write_en    
   ,waddr_i  => text_buffer_write_addr
   ,wdata_i  => text_buffer_write_code
   ,wovf_o   => open
    );

  -----------------------------------------------------------------------------
  -- Text Buffer Access
  -----------------------------------------------------------------------------
  text_buffer_read_en     <= not vga_Blank and vga_HCOUNT_en and vga_VCOUNT_en;
  text_buffer_read_addr_x <= vga_HCOUNT_ext2(TEXT_BUFFER_ADDR_X_SIZE-1 downto 0);
  text_buffer_read_addr_y <= vga_VCOUNT_ext2(TEXT_BUFFER_ADDR_Y_SIZE-1 downto 0);
  text_buffer_read_addr   <= text_buffer_read_addr_y(2 downto 0) & text_buffer_read_addr_x(2 downto 0);

  -- Write in the Text Buffer by the bus
  text_buffer_write_en    <= '1' when (cs_i = '1' and we_i = '1') and (addr_i = WADDR_TEXT_BUFFER) else
                             '0';
  text_buffer_write_code  <= wdata_i;
  text_buffer_write_addr  <= text_buffer_write_addr_y_r(2 downto 0) & text_buffer_write_addr_x_r(2 downto 0);
  
  -----------------------------------------------------------------------------
  -- Font ROM access
  -----------------------------------------------------------------------------
  font_memory_read_addr   <= text_buffer_read_code;
  character_read_addr_x   <= vga_HCOUNT(2 downto 0);
  character_read_addr_y   <= vga_VCOUNT(3 downto 0);

  -----------------------------------------------------------------------------
  -- Font ROM
  -----------------------------------------------------------------------------
  ins_font_memory : entity work.vga_font_memory(rtl)
  port map (
--  clk_i            => clk_i
-- ,arstn_i          => arstn_i
    character_id_i => font_memory_read_addr
   ,character_x_i  => character_read_addr_x
   ,character_y_i  => character_read_addr_y
   ,pixel_o        => pixel
    );

  -----------------------------------------------------------------------------
  -- VGA Controller
  -----------------------------------------------------------------------------
  ins_vga_controller : entity work.vga_controller_640_60(Behavioral)
  port map (
    pixel_clk   => clk_25Mhz
   ,rst         => arst
   ,HS          => vga_HSYNC
   ,VS          => vga_VSYNC
   ,hcount      => vga_HCOUNT
   ,vcount      => vga_VCOUNT
   ,blank       => vga_Blank
   );
  
  -----------------------------------------------------------------------------
  -- Display
  -----------------------------------------------------------------------------
  vga_RGB_unicolor        <= color_r;
  vga_RGB_text_background <= color_r(6) & "00" &              -- Red
                             color_r(5) & "00" &              -- Green
                             color_r(4) & "0"  ;              -- Blue
  vga_RGB_text_foreground <= color_r(2) & color_r(3) & "0" &  -- Red
                             color_r(1) & color_r(3) & "0" &  -- Green
                             color_r(0) & color_r(3);         -- Blue
  vga_RGB_text            <= vga_RGB_text_foreground when pixel = '1' else
                             vga_RGB_text_background;
  vga_RGB                 <= vga_RGB_unicolor when cfg_mode = MODE_UNICOLOR else
                             vga_RGB_text     when cfg_mode = MODE_TEXT     else
                             vga_RGB_frame    when cfg_mode = MODE_FRAME    else
                             (others => '0');  -- black
                             
  -----------------------------------------------------------------------------
  -- Configuration Register
  -----------------------------------------------------------------------------
  process(arstn_i,clk_i)
  begin 
    if arstn_i='0'         -- reset actif haut
    then
      config_r                 <= (others => '0');
      color_r                  <= (others => '0');

      text_buffer_write_addr_x_r <= (others => '0');
      text_buffer_write_addr_y_r <= (others => '0');
    elsif rising_edge(clk_i)
    then 
      if (cs_i = '1' and we_i = '1')
      then
        if (addr_i = WADDR_CFG)
        then 
          config_r <= wdata_i(config_r'range);
        end if;
        
        if (addr_i = WADDR_COLOR)
        then 
          color_r <= wdata_i;
        end if;

        if (addr_i = WADDR_TEXT_BUFFER)
        then
          if ((unsigned(text_buffer_write_addr_x_r)+1) < to_unsigned(TEXT_BUFFER_X_CUR,TEXT_BUFFER_ADDR_X_SIZE))
          then
            text_buffer_write_addr_x_r <= std_logic_vector(unsigned(text_buffer_write_addr_x_r) + to_unsigned(1,TEXT_BUFFER_ADDR_X_SIZE));
          else
            text_buffer_write_addr_x_r <= (others => '0');

            if ((unsigned(text_buffer_write_addr_y_r)+1) < to_unsigned(TEXT_BUFFER_Y_CUR,TEXT_BUFFER_ADDR_Y_SIZE))
            then
              text_buffer_write_addr_y_r <= std_logic_vector(unsigned(text_buffer_write_addr_y_r) + to_unsigned(1,TEXT_BUFFER_ADDR_Y_SIZE));
            else
              text_buffer_write_addr_y_r <= (others => '0');
            end if;
          end if;
        end if;
      end if;
    end if;
  end process;

  -----------------------------------------------------------------------------
  -- Address - vga
  -----------------------------------------------------------------------------
  vga_HCOUNT_ext          <= "00"&vga_HCOUNT;
  vga_HCOUNT_ext1         <= std_logic_vector(unsigned(vga_HCOUNT_ext)/to_unsigned(CHAR_X_MAX,TEXT_BUFFER_ADDR_SIZE_MAX));
  vga_HCOUNT_en           <= '1' when unsigned(vga_HCOUNT_ext1)<to_unsigned(TEXT_BUFFER_X_CUR,TEXT_BUFFER_ADDR_SIZE_MAX) else '0';
  vga_HCOUNT_ext2         <= vga_HCOUNT_ext1 when vga_HCOUNT_en = '1' else (others => '0');
  vga_VCOUNT_ext          <= "00"&vga_VCOUNT;
  vga_VCOUNT_ext1         <= std_logic_vector(unsigned(vga_VCOUNT_ext)/to_unsigned(CHAR_Y_MAX,TEXT_BUFFER_ADDR_SIZE_MAX));
  vga_VCOUNT_en           <= '1' when unsigned(vga_VCOUNT_ext1)<to_unsigned(TEXT_BUFFER_Y_CUR,TEXT_BUFFER_ADDR_SIZE_MAX) else '0';
  vga_VCOUNT_ext2         <= vga_VCOUNT_ext1 when vga_VCOUNT_en = '1' else (others => '0');

  -----------------------------------------------------------------------------
  -- read internal register
  -----------------------------------------------------------------------------
  busy_o                  <= '0'; -- Never Busy
  
  rdata_o                 <= std_logic_vector(resize(unsigned(color_r ), rdata_o'length))    when (addr_i = RADDR_COLOR      ) else
                             std_logic_vector(resize(unsigned(config_r), rdata_o'length)); --when (addr_i = RADDR_CFG        );

  -----------------------------------------------------------------------------
  -- VGA Output
  -----------------------------------------------------------------------------
  vga_HSYNC_o             <= vga_HSYNC;
  vga_VSYNC_o             <= vga_VSYNC;
  vga_Red_o               <= vga_RGB(7 downto 5) when vga_Blank = '0' else (others => '0');
  vga_Green_o             <= vga_RGB(4 downto 2) when vga_Blank = '0' else (others => '0');
  vga_Blue_o              <= vga_RGB(1 downto 0) when vga_Blank = '0' else (others => '0');
  

  
end rtl;

